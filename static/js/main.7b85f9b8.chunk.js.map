{"version":3,"sources":["config.js","App.js","index.js"],"names":["radioOptions","id","value","label","type","Background","styled","div","_templateObject","_taggedTemplateLiteral","H1","h1","_templateObject2","Card","_templateObject3","Input","input","_templateObject4","CopyButton","button","_templateObject5","CheckBoxInputContainer","_templateObject6","PwLengthContainer","_templateObject7","Button","_templateObject8","Label","_templateObject9","App","_useState","useState","_useState2","_slicedToArray","checkbox","setCheckbox","_useState3","_useState4","length","setLength","_useState5","_useState6","password","setPassword","copyToClipboard","content","window","isSecureContext","navigator","clipboard","writeText","alert","text","textArea","document","createElement","body","appendChild","focus","select","execCommand","err","console","error","removeChild","unsecuredCopyToClipboard","React","className","placeholder","onClick","for","name","min","max","onChange","e","target","Slider","valueLabelDisplay","aria-label","defaultValue","map","option","index","style","height","key","newCheckbox","_toConsumableArray","includes","indexOf","splice","push","symbols","output","i","Math","floor","random","pw","slice","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7b85f9b8.chunk.js","sourcesContent":["export const radioOptions = [\n    // { id :\"length\", value: \"length\", label: \"Password Length\", min: \"6\", max: \"40\", type: \"number\"},\n    { id: \"upperCase\", value: \"upperCase\", label: \"Upper Case\", type: \"checkbox\" },\n    { id: \"lowerCase\", value: \"lowerCase\", label: \"Lower Case\", type: \"checkbox\" },\n    { id: \"numbers\", value: \"numbers\", label: \"Numbers\" , type: \"checkbox\"},\n    { id: \"symbols\", value: \"symbols\", label: \"Symbols\", type: \"checkbox\" }\n];","import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { radioOptions } from \"./config\";\nimport navigator from \"react\";\nimport Slider from \"@mui/material/Slider\";\n\nconst Background = styled.div`\n  background: rgb(22 188 191);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  color: black;\n  font-size: 3rem;\n  font-family: \"Roboto Mono\", monospace;\n  font-weight: 700;\n  margin-bottom: 10%;\n  text-align: center;\n\n  @media (max -width: 1024px) {\n    font-size: 2rem;\n  }\n`;\n\nconst Card = styled.div`\n  padding: 2rem;\n  width: 40%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: space-evenly;\n  border-radius: 67px;\n  background: #20c2c4c4;\n  box-shadow: rgb(27 146 148) 41px -41px 52px, rgb(35 186 188) -41px 41px 52px;\n\n  @media (max-width: 1024px) {\n    width: 80%;\n  }\n`;\n\nconst Input = styled.input`\n  border-radius: 67px;\n  font-family: \"Roboto Mono\", monospace;\n  text-align: center;\n  font-size: 1.5rem;\n  border-radius: 15px;\n  background: #06cfc185;\n  border-style: groove;\n  border-color: #f7feff36;\n  margin: 2rem 0rem ;\n  height: 3rem;\n  width: 92%;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst CopyButton = styled.button`\n  background: #06cfc185;\n  font-family: \"Roboto Mono\", monospace;\n  text-align: center;\n  font-size: 1rem;\n  border-radius: 8px;\n  padding: 0rem;\n  text-align: center;\n  height: 42%;\n  border: 1px #ffffff2b solid;\n  width: 100%;\n  height: 3rem;\n  cursor: pointer;\n\n &:hover {\n    background: #06cfc1;\n    color: white; \n  }\n`;\n\nconst CheckBoxInputContainer = styled.div`\n  display: grid;\n  grid-template-columns: 85% 15%;\n  grid-template-rows: 1fr;\n  gap: 0px 0px;\n  grid-template-areas: \". .\";\n  justify-content: space-between;\n  align-items: center;\n  margin: 1rem 0;\n  width: 98%;\n`;\n\nconst PwLengthContainer = styled.div`\n  display: grid;\n  grid-template-columns: 90% 6%;\n  grid-template-rows: 1fr;\n  width: 98%;\n`;\n\nconst Button = styled.button`\n  height: 3rem;\n  padding: 0rem 3.2rem;\n  margin: 2rem;\n  border-radius: 67px;\n  font-family: \"Roboto Mono\", monospace;\n  text-align: center;\n  font-size: 1.5rem;\n  border-radius: 15px;\n  border-radius: 50px;\n  background: linear-gradient(120deg, #06cfc1, #05aea2);\n  box-shadow: -1px 1px 3px #024d48, 1px -1px 3px #0affff;\n  border-style: hidden;\n  background-size: 200% 100%;\n  background-position: 100% 0;\n  transition: background-position 0.5s;\n  cursor: pointer;\n\n  &:hover {\n    background-position: 0 0;\n    color: white;\n  }\n`;\n\nconst Label = styled.label`\n  color: black;\n  font-family: \"Roboto Mono\", monospace;\n  font-size: 1.5rem;\n  font-weight: 500;\n  @media (max-width: 768px) {\n    font-size: 2rem;\n  }\n`;\n\nfunction App() {\n  const [checkbox, setCheckbox] = useState([]);\n  const [length, setLength] = useState(6);\n  const [password, setPassword] = useState(\"\");\n\n  const copyToClipboard = (content) => {\n    if (window.isSecureContext && navigator.clipboard) { // Secure context check\n      navigator.clipboard.writeText(content);\n      alert('Copied to clipboard');\n    } else {\n      unsecuredCopyToClipboard(content);// Fallback for insecure context\n    }\n  };\n\n  function unsecuredCopyToClipboard(text) {\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;// Set the text content to be the text you wished to copy\n    document.body.appendChild(textArea);\n    textArea.focus();// Select the text content\n    textArea.select();// Use try & catch for unsupported browser\n    try {\n      document.execCommand('copy');\n      alert('Copied to clipboard');\n    } catch (err) {\n      console.error('Unable to copy to clipboard', err);\n      alert('Unable to copy to clipboard');\n    }\n    document.body.removeChild(textArea);\n  }\n\n  return (\n    <Background>\n      <H1> Random Password Generator</H1>\n      <Card className=\"card\">\n\n        <CheckBoxInputContainer className=\"checkbox-input-container\">\n          <Input type=\"text\" placeholder=\"Your Password\" value={password} />\n          <CopyButton onClick={() => copyToClipboard(password)}\n          >Copy</CopyButton>\n        </CheckBoxInputContainer>\n      <PwLengthContainer>\n          <Label for=\"length\">Password Length</Label>\n          <input\n            type=\"number\"\n            id=\"length\"\n            name=\"length\"\n            min=\"6\"\n            max=\"25\"\n            onChange={(e) => {\n              setLength(e.target.value);\n            }}\n            value={length}\n          />\n          </PwLengthContainer>\n          <Slider\n            valueLabelDisplay=\"auto\"\n            aria-label=\"pretto slider\"\n            defaultValue={6}\n            min={6}\n            max={25}\n            onChange={(e, value) => {\n              setLength(value);\n            }}\n\n          />\n        {radioOptions.map((option, index) => (\n          <CheckBoxInputContainer className=\"checkbox-input-container\">\n            <Label for={option.id}>{option.label}</Label>\n            <input\n              style={{ height: \"1.4rem\" }}\n              type={option.type}\n              id={option.id}\n              name={option.value}\n              value={option.value}\n              min={option.min}\n              max={option.max}\n              key={index}\n              onChange={() => {\n                const newCheckbox = [...checkbox]; //copy the array\n                if (newCheckbox.includes(option.value)) {\n                  const index = newCheckbox.indexOf(option.value); //get the index of the value\n                  newCheckbox.splice(index, 1); //remove the value from the array\n                }\n                if (!newCheckbox.includes(option.value)) {\n                  newCheckbox.push(option.value); //add the value to the array\n                }\n                setCheckbox(newCheckbox);\n              }}\n            />\n          </CheckBoxInputContainer>\n        ))}\n        <Button\n          onClick={() => {\n            const upperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            const lowerCase = \"abcdefghijklmnopqrstuvwxyz\";\n            const numbers = \"0123456789\";\n            const symbols = \"!@#$%^&*()_+~`|}{[]:;?><,./-=\";\n            let output = \"\";\n\n            for (let i = 0; i < length; i++) {\n              if (checkbox.includes(\"upperCase\")) {\n                output +=\n                  upperCase[Math.floor(Math.random() * upperCase.length)];\n              }\n              if (checkbox.includes(\"lowerCase\")) {\n                output += lowerCase[Math.floor(Math.random() * lowerCase.length)];\n              }\n              if (checkbox.includes(\"numbers\")) {\n                output += numbers[Math.floor(Math.random() * numbers.length)];\n              }\n              if (checkbox.includes(\"symbols\")) {\n                output += symbols[Math.floor(Math.random() * symbols.length)];\n              }\n              let pw = output.slice(0, length);\n              setPassword(pw);\n            }\n          }}\n        >\n          Generate Password\n        </Button>\n      </Card>\n    </Background>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\"\nimport \"./index.css\";\nimport App from \"./App.js\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}